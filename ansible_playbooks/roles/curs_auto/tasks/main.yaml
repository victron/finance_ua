---

# create venv and install application

- name: check pip3 in venv "{{ venv_dir }}"
  stat: path={{ home_dir }}/{{ venv_dir }}/bin/pip3
  register: venv_result

- block:
  - block:
    - name: Initiate virtualenv for {{ python_ver }}
      command: "{{ python_ver }} -m venv {{ home_dir }}/{{ venv_dir }}"
#    - name: install pip
#      command: "{{ home_dir }}/{{ venv_dir }}/bin/{{ python_ver }} {{ home_dir }}/get-pip.py"
    become: yes
    become_user: "{{ app_user }}"
    become_method: sudo
  when: not venv_result.stat.exists

# ------------------ remove application if installed ----------
  # ------- stop services -----------
- name: check  {{ service }}.service file exists
  stat: path=/etc/systemd/system/{{ service }}.service follow=yes
  register: systemd_config

- block:
  - name: stop {{ service }}.service
    service: name={{ service }}  state=stopped
  become: yes
  become_method: sudo
  when: systemd_config.stat.exists == True

  # remove app from venv and home dir
- block:
  - name: remove application from env
    pip: name={{ service }}
         virtualenv={{ home_dir }}/{{ venv_dir }}
         virtualenv_python={{ python_ver }}
         state=absent
  - name: delete previos file package
    file: name=/{{ home_dir }}/{{ pkg_curs_auto }}
      state=absent
  become: yes
  become_user: "{{ app_user }}"
  become_method: sudo
  when: systemd_config.stat.exists == True

# ---------- create package localy ----------------
- name: generate wheel
  command: "{{ python_ver }} setup.py bdist_wheel"
  args:
    chdir: ../{{ src_dir }}
  delegate_to: 127.0.0.1

  # local_action: command /usr/bin/take_out_of_pool {{ inventory_hostname }}
# =======================================================

- block:
  - name: copy application package on remote
    copy: "src=../dist/{{ pkg_curs_auto }} dest={{ home_dir }}/"

  # installing application
  - name: install application
    pip: name='file://{{ home_dir }}/{{ pkg_curs_auto }}'
         virtualenv={{ home_dir }}/{{ venv_dir }}
         virtualenv_python={{ python_ver }}
#  - name: generate logging.yaml
#    template: src=logging.yml.j2 dest={{ home_dir }}/{{ venv_dir }}/.curs/logging.yml
    notify:
      - start {{ service }}
  become: yes
  become_user: "{{ app_user }}"
  become_method: sudo

# configure app
- block:
#  # -------------- cursauto configs ---------------
#  - name: generate curs_auto  script into init.d
#    template: src=init-script.j2 dest=/etc/init.d/curs_auto mode="a+x"
#    # in ansible2 vars could be inside tasks
#    vars:
#      cmd: $dir/bin/curs_auto
#      provider: curs_auto
#      Required_Start: mongodb $network $syslog
#    when: ansible_service_mgr == "upstart"
#    notify:
#      - start {{ service }}
  - name: generate cursauto systemd config
    template: src=cursauto.service.j2 dest=/etc/systemd/system/{{ service }}.service
    with_items:
      - "{{ required }}"
    when: ansible_service_mgr == "systemd"
    notify:
      # reload systemd
      - start {{ service }}
  become: yes
  become_method: sudo


