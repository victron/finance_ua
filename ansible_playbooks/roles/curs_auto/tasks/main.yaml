---
- name: check  {{ service }}.service file exists
  stat: path=/etc/systemd/system/{{ service }}.service follow=yes
  register: systemd_config

- name: generate wheel, create package localy
  command: python3 setup.py bdist_wheel
  args:
    chdir: ../{{ src_dir }}
  delegate_to: 127.0.0.1


# remove application if installed
## stop services
- block:
  - name: stop {{ service }}.service
    service: name={{ service }}  state=stopped

  - name: remove application from env
    pip: 
      name: "{{ service }}"
      virtualenv: "{{ home_dir }}/{{ venv_dir }}"
      state: absent
  - name: delete previos file package
    file: 
      name: "/{{ home_dir }}/{{ pkg_curs_auto }}"
      state: absent

  become: yes
  when: systemd_config.stat.exists == True

- block:
  - name: copy application package on remote
    copy:
      src: "../dist/{{ pkg_curs_auto }}" 
      dest: "{{ home_dir }}/{{ pkg_curs_auto }}"
      owner: "{{ app_user }}"
      group: "{{ app_user }}"

  - name: install application
    pip: 
      name: "file://{{ home_dir }}/{{ pkg_curs_auto }}"
      virtualenv: "{{ home_dir }}/{{ venv_dir }}"
      virtualenv_command: "python3 -m venv"
      virtualenv_site_packages: yes
    become_user: "{{ app_user }}"
    notify:
      - start {{ service }}

  become: yes



# configure app
- block:
  - name: generate cursauto systemd config
    template: src=cursauto.service.j2 dest=/etc/systemd/system/{{ service }}.service
    with_items:
      - "{{ required }}"
    when: ansible_service_mgr == "systemd"
    notify:
      # reload systemd
      - start {{ service }}
  become: yes
  become_method: sudo

