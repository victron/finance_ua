---
- block:
  - name: install nginx
    apt: name=nginx state=present
    notify:
      - start nginx

  - name: install letsencrypt
    apt: name=letsencrypt state=present
    when: ansible_distribution_version != "14.04"

# -------------- get cert ------------------
#  - name: check cert file
  - stat:
      path: /etc/letsencrypt/live/{{ fqdn }}/cert.pem
      follow: yes
    register: cert

  - block:
    - name: generate nginx.conf (get letsencrypt)
      template: src=nginx_80.conf.j2 dest=/etc/nginx/nginx.conf
    - name: reload nginx
      service: name=nginx state=reloaded
    - name: Create a Configuration SSL Key and Certificate Snippet
      template: src=ssl-letsencrypt.j2 dest=/etc/nginx/snippets/ssl-{{ fqdn }}.conf
    - name: Create a Configuration Snippet with Strong Encryption Settings
      template: src=ssl-params.conf.j2 dest=/etc/nginx/snippets/ssl-params.conf
    - name: Generate Strong Diffie-Hellman Group
      command: creates=/etc/ssl/certs/dhparam.pem openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
    - name: Creates directory /etc/letsencrypt
      file: path=/etc/letsencrypt state=directory
    - name: create letsencrypt config file
      template: src=letsencrypt.conf.j2 dest=/etc/letsencrypt/letsencrypt.conf
    - name: get letsencrypt cert
      command: letsencrypt certonly --agree-tos --non-interactive --config /etc/letsencrypt/letsencrypt.conf
    # don't execute block when cert.pem exists
    when:
      - cert.stat.isreg is not defined and cert.stat.exists == False

  - name: make static directory
    command: mkdir -p {{ static_path }}
  - name: generate nginx.conf (production config)
    template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  - name: reload nginx
    service: name=nginx state=reloaded

  become: yes
  become_method: sudo

# - include_tasks: iptables.yaml
- include_tasks: cron.yaml
