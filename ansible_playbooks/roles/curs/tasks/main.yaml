---
# create venv and install application
- name: check venv
  stat: path={{ home_dir }}/{{ venv_dir }}/bin/activate
  register: venv_result

- block:
  - name: create app. user
    user: name={{ app_user }}
      comment="User for curs application"
      groups=www-data
      home={{ home_dir }}
      shell=/usr/sbin/nologin
    become: yes
    become_method: sudo

  - block:
    - name: Initiate virtualenv for python3.5
      command: python3.5 -m venv --without-pip {{ home_dir }}/{{ venv_dir }}
    - name: download get-pip.py
      get_url: url=https://bootstrap.pypa.io/get-pip.py
        dest={{ home_dir }}/get-pip.py
        force=no
    - name: install pip3.5
      command: "{{ home_dir }}/{{ venv_dir }}/bin/python3.5 {{ home_dir }}/get-pip.py"
    become: yes
    become_user: "{{ app_user }}"
    become_method: sudo
  when: not venv_result.stat.exists

- block:
  - name: copy application package on remote
    copy: src=../dist/{{ app_file }} dest={{ home_dir }}/
  # installing application
  - name: install application
    pip: name='file://{{ home_dir }}/{{ app_file }}'
         virtualenv={{ home_dir }}/{{ venv_dir}}
         virtualenv_python=python3.5
  - name: generate logging.yaml
    template: src=logging.yml.j2 dest={{ home_dir }}/{{ venv_dir }}/.curs/logging.yml
  become: yes
  become_user: "{{ app_user }}"
  become_method: sudo

# configure app
- block:
  - name: copy static files
    shell: cp -R {{ home_dir }}/{{ venv_dir }}/lib/python3.5/site-packages/app/static/* {{ static_path }}
    notify:
      - start uwsgi
      - start nginx

    # -------------- curs configs ---------------
  - block:
    - name: make /etc/curs directory
      command: mkdir -p {{ conf_dir }}
    - name: generate curs.conf from template
      template: src=curs.conf.j2 dest={{ conf_dir }}/curs.conf
    - name: copy uwsgi (curs) script to init.d
      command: cp {{ home_dir }}/{{ venv_dir }}/bin/curs /etc/init.d/curs
      notify:
        - start uwsgi
        - start nginx
    when: ansible_service_mgr == "upstart"

  - name: generate curs systemd config
    template: src=curs.service.j2 dest=/etc/systemd/system/curs.service
    with_items:
      - "{{ curs }}"
    when: ansible_service_mgr == "systemd"
    notify:
      - reload systemd
      - start uwsgi
      - start nginx
      - start cursauto

  # -------------- cursauto configs ---------------
  - name: generate curs_auto  script into init.d
    template: src=init-script.j2 dest=/etc/init.d/curs_auto mode="a+x"
    # in ansible2 vars could be inside tasks
    vars:
      cmd: $dir/bin/curs_auto
      provider: curs_auto
      Required_Start: mongodb $network $syslog
    when: ansible_service_mgr == "upstart"
    notify:
      - start cursauto
  - name: generate cursauto systemd config
    template: src=cursauto.service.j2 dest=/etc/systemd/system/cursauto.service
    with_items:
      - "{{ cursauto }}"
    when: ansible_service_mgr == "systemd"
    notify:
      - reload systemd
      - start cursauto
  become: yes
  become_method: sudo


