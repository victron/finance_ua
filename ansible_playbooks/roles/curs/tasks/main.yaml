---
- name: check  curs.service file exists
  stat: path=/etc/systemd/system/curs.service follow=yes
  register: curs_config

# create package localy
- name: generate wheel
  local_action: command python3 setup.py bdist_wheel
  args:
    chdir: ../{{ src_dir }}
  delegate_to: 127.0.0.1
  

# remove application if installed
- block:
  - name: stop {{ service }}.service
    service: name={{ service }}  state=stopped

  - name: remove application from env
    pip: 
      name: curs
      virtualenv: "{{ home_dir }}/{{ venv_dir }}"
      virtualenv_command: "python3 -m venv"
      state: absent

  - name: delete previos file package
    file: name=/{{ home_dir }}/{{ pkg_curs }}
      state=absent

  become: yes
  when: curs_config.stat.exists == True


- block:
  - name: copy application package on remote
    copy:
      src: "../dist/{{ pkg_curs }}"
      dest: "{{ home_dir }}/{{ pkg_curs }}"
      owner: "{{ app_user }}"
      group: "{{ app_user }}"

  - name: install application
    pip: 
      name: "file://{{ home_dir }}/{{ pkg_curs }}"
      virtualenv: "{{ home_dir }}/{{ venv_dir }}"
      virtualenv_command: "python3 -m venv"
      virtualenv_site_packages: yes
    become_user: "{{ app_user }}"

  - name: generate logging.yaml
    template: src=logging.yml.j2 dest={{ home_dir }}/{{ venv_dir }}/.curs/logging.yml
    notify:
      - start uwsgi

  become: yes

# configure app
- block:
  - name: copy static files
    shell: cp -R {{ home_dir }}/{{ venv_dir }}/lib/{{ python_ver }}/site-packages/curs/static/* {{ static_path }}
    notify:
      - start nginx

# curs configs
  - block:
    - name: make /etc/curs directory
      command: mkdir -p {{ conf_dir }}

    - name: generate curs.conf from template
      template: src=curs.conf.j2 dest={{ conf_dir }}/curs.conf

    - name: copy uwsgi (curs) script to init.d
      command: cp {{ home_dir }}/{{ venv_dir }}/bin/curs /etc/init.d/curs
      notify:
        - start uwsgi
        - start nginx
    when: ansible_service_mgr == "upstart"

  - name: generate curs systemd config
    template: src=curs.service.j2 dest=/etc/systemd/system/curs.service
    with_items:
      - "{{ required }}"
    when: ansible_service_mgr == "systemd"
    notify:
      - systemd {{ service }} start
      - start nginx

  become: yes
  become_method: sudo
