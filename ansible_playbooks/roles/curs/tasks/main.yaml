---
# create venv and install application
- name: check venv -> {{ venv_dir }}
  stat: path={{ home_dir }}/{{ venv_dir }}/bin/activate
  register: venv_result

- block:
  - name: Initiate virtualenv for {{ python_ver }}
    command: "{{ python_ver }} -m venv --without-pip {{ home_dir }}/{{ venv_dir }}"
  - name: install pip
    command: "{{ home_dir }}/{{ venv_dir }}/bin/{{ python_ver }} {{ home_dir }}/get-pip.py"
  become: yes
  become_user: "{{ app_user }}"
  become_method: sudo
  when: not venv_result.stat.exists

# ------------------ remove application if installed ----------
  # ------- stop services -----------
- name: check  curs.service file exists
  stat: path=/etc/systemd/system/curs.service follow=yes
  register: curs_config

- block:
  - name: stop {{ service }}.service
    service: name={{ service }}  state=stopped
  become: yes
  become_method: sudo
  when: curs_config.stat.exists == True

  # remove app from venv and home dir
- block:
  - name: remove application from env
    pip: name=curs
         virtualenv={{ home_dir }}/{{ venv_dir }}
         virtualenv_python={{ python_ver }}
         state=absent
  - name: delete previos file package
    file: name=/{{ home_dir }}/{{ pkg_curs }}
      state=absent
  become: yes
  become_user: "{{ app_user }}"
  become_method: sudo
  when: curs_config.stat.exists == True

# ---------- create package localy ----------------
- name: generate wheel
  # command: python3.6 setup.py bdist_wheel
  local_action: command {{ python_ver }} setup.py bdist_wheel
  args:
    chdir: ../{{ src_dir }}
  delegate_to: 127.0.0.1
  # local_action: command /usr/bin/take_out_of_pool {{ inventory_hostname }}
# =======================================================

- block:
  - name: copy application package on remote
    copy: src=../dist/{{ pkg_curs }} dest={{ home_dir }}/

  # installing application
  - name: install application
    pip: name='file://{{ home_dir }}/{{ pkg_curs }}'
         virtualenv={{ home_dir }}/{{ venv_dir }}
         virtualenv_python={{ python_ver }}
  - name: generate logging.yaml
    template: src=logging.yml.j2 dest={{ home_dir }}/{{ venv_dir }}/.curs/logging.yml
    notify:
      - start uwsgi
  become: yes
  become_user: "{{ app_user }}"
  become_method: sudo

# configure app
- block:
  - name: copy static files
    shell: cp -R {{ home_dir }}/{{ venv_dir }}/lib/{{ python_ver }}/site-packages/curs/static/* {{ static_path }}
    notify:
      - start nginx

    # -------------- curs configs ---------------
  - block:
    - name: make /etc/curs directory
      command: mkdir -p {{ conf_dir }}
    - name: generate curs.conf from template
      template: src=curs.conf.j2 dest={{ conf_dir }}/curs.conf
    - name: copy uwsgi (curs) script to init.d
      command: cp {{ home_dir }}/{{ venv_dir }}/bin/curs /etc/init.d/curs
      notify:
        - start uwsgi
        - start nginx
    when: ansible_service_mgr == "upstart"

  - name: generate curs systemd config
    template: src=curs.service.j2 dest=/etc/systemd/system/curs.service
    with_items:
      - "{{ required }}"
    when: ansible_service_mgr == "systemd"
    notify:
      - systemd {{ service }} start
#      - start uwsgi # alternative string above
      - start nginx
  become: yes
  become_method: sudo


